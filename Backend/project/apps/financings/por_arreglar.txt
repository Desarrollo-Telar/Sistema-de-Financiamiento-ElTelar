def _calcular_total(self):
        cuota = self._cuota_pagar()
        
        if cuota is None:
            return "No hay pagos pendientes para calcular el total."

       
        dias_total = (cuota.due_date - cuota.start_date).days        

        dias_diferencia = max((self.fecha_emision - cuota.start_date).days, 0)


        dias_atrasados = max((self.fecha_emision - cuota.due_date).days, 0)


        mora = self._calculo_mora(cuota.saldo_pendiente, dias_atrasados - 15) if dias_atrasados > 15 else 0

        fecha_gracia = cuota.due_date + relativedelta(days=15)
        

        if self.fecha_emision > fecha_gracia:  # Corrected condition
            dias_adicionales = dias_total + (dias_atrasados-15)
            total_dias = dias_total + dias_adicionales
            intereses = cuota.interes_acumulado+self._calculo_intereses(dias_adicionales, cuota.saldo_pendiente) - cuota.interes_pagado
        
        elif self.fecha_emision <cuota.due_date :
            
            intereses = cuota.interes_acumulado+self._calculo_intereses(dias_total, cuota.saldo_pendiente) - cuota.interes_pagado
        elif self.fecha_emision >=cuota.due_date or self.fecha_emision <= fecha_gracia:
           intereses = cuota.interes_acumulado+self._calculo_intereses(dias_total, cuota.saldo_pendiente) - cuota.interes_pagado

        total = round(mora + intereses , 2)

        res = {
            'total':total,
            'interes':intereses,
            'mora':mora,
           
        }
        
        return res
    
    def realizar_pago(self):
        total_pagar = self._calcular_total()['total']
        monto_depositado = self.monto
        mora = self._calcular_total()['mora']
        interes = self._calcular_total()['interes']

        # Variables para registrar cuánto se pagó de cada parte
        pagado_mora = 0
        pagado_interes = 0
        pagado_capital = 0
        saldo_pendiente = 0
      
        saldo_pendiente = round(total_pagar-monto_depositado,2)
        

        def procesar_pago(tipo, monto_requerido):
            nonlocal monto_depositado, pagado_mora, pagado_interes, pagado_capital

            if monto_depositado >= monto_requerido:
                monto_depositado = round(monto_depositado - monto_requerido, 2)
                
                if tipo == 'Mora':
                    pagado_mora += monto_requerido
                elif tipo == 'Interes':
                    pagado_interes += monto_requerido
                
                
                return 0
            else:
                saldo = round(monto_requerido - monto_depositado, 2)
                
                if tipo == 'Mora':
                    pagado_mora += monto_depositado
                elif tipo == 'Interes':
                    pagado_interes += monto_depositado
               
                
                monto_depositado = 0    
                return saldo

        # Procesar pago de mora
        mora = procesar_pago('Mora', mora)
 
        if mora > 0:            
            pagado_capital = monto_depositado
            self.registrar_pago('Mora', pagado_mora,pagado_interes,pagado_capital,self.monto,interes,mora,saldo_pendiente)
            print(f"Pago realizado parcialmente. Quedan Q{mora} de mora pendiente. ")
            return f"Pago realizado parcialmente. Quedan Q{mora} de mora pendiente. "

        # Procesar pago de intereses
        interes = procesar_pago('Interes', interes)
        
        if interes > 0:       
            pagado_capital = monto_depositado     
            self.registrar_pago('Interes', pagado_mora,pagado_interes,pagado_capital,self.monto,interes,mora,saldo_pendiente)
            print(f"Pago realizado parcialmente. Quedan Q{interes} de intereses pendientes. ")
            return f"Pago realizado parcialmente. Quedan Q{interes} de intereses pendientes. "

        

        # Si todo fue pagado completamente
        pagado_capital = monto_depositado
        saldo_pendiente = self._cuota_pagar().saldo_pendiente - pagado_capital
        self.registrar_pago('COMPLETO',pagado_mora,pagado_interes,pagado_capital,self.monto,interes,mora,saldo_pendiente)
        return f"Pago realizado con éxito. Q{monto_depositado} restante."
       

        

    def registrar_pago(self,tipo,pago_mora,pago_interes,pago_capital,monto, interes_acumulado, mora_acumulada,saldo_pendiente=None ):
        cuota = self._cuota_pagar()
        mora = self._calcular_total()['mora']
        interes = self._calcular_total()['interes']
        
        print(f'PAGO DEL CREDITO:\nPAGO MORA: {pago_mora} DE MORA GENERADA: {mora}\nPAGO INTERES: {pago_interes} DE INTERES GENERADO: {interes}\nAPORTACION A CAPITAL: {pago_capital} ')
        

        cuota.interes_pagado = pago_interes
        cuota.mora_pagado = pago_mora
        cuota.saldo_pendiente -= pago_capital
        cuota.interes_acumulado = interes_acumulado
        cuota.mora_acumulada = mora_acumulada

        if self.monto == cuota.installment or self.monto >= cuota.installment:
            cuota.status = True
            cuota.save()
        
            

        # Crear un nuevo estado de cuenta
        estado_cuenta = AccountStatement()
        estado_cuenta.credit = self.credit
        
        # Registrar el tipo de pago
        
        estado_cuenta.late_fee_paid = pago_mora
        
        estado_cuenta.interest_paid = pago_interes
        
        estado_cuenta.capital_paid = pago_capital
        
        estado_cuenta.abono = monto
        
        # Asociar el estado de cuenta con la cuota y el saldo pendiente
        estado_cuenta.saldo_pendiente = saldo_pendiente
        estado_cuenta.numero_referencia = self.numero_referencia
        descrip = f'''
       
        PAGO DEL CREDITO:
        PAGO MORA: Q{pago_mora} DE MORA GENERADA Q{mora}
        PAGO INTERES: Q{pago_interes} DE INTERES GENERADO: Q{interes}
        APORTACION A CAPITAL: Q{pago_capital} '''

        estado_cuenta.description = descrip
        
        # Asociar el pago al estado de cuenta
        pago = Payment.objects.get(id=self.id)   
        estado_cuenta.payment = pago
        pago.estado_transaccion = 'COMPLETADO'
        pago.save()
        
        # Guardar el estado de cuenta
        estado_cuenta.save()

       
        
        
        if cuota.saldo_pendiente > 0:
            # Crear una nueva cuota con el saldo pendiente
            nuevo_fecha_inicio = cuota.due_date
             # Crear una nueva cuota si es necesario
            nuevo_monto = (cuota.outstanding_balance - cuota.principal)
            
           
            plan = PaymentPlan(
                credit_id=self.credit, 
                start_date=nuevo_fecha_inicio, 
                outstanding_balance=nuevo_monto, 
                saldo_pendiente = saldo_pendiente
                
            )
            plan.save()
          
        else:
            # Marcar el crédito como pagado si no hay saldo pendiente
            credito = Credit.objects.get(id=self.credit.id)
            credito.is_paid_off = True
            credito.save()
        